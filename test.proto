syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

package test;

option go_package = "github.com/giladsher/proto-zod";

enum Enum {
  UNKNOWN = 0;
  TEST = 1;
  ANOTHER = 2;
}

// Testing a comment of a message
message Test {
  reserved 1000; // Here to test how this would work.
  double a = 1;
  float b = 2;
  int32 c = 3; // Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.
  int64 d = 4; // Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.
  uint32 e = 5; // Uses variable-length encoding.
  uint64 f = 6; // Uses variable-length encoding.
  sint32 g = 7; // Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.
  sint64 h = 8; // Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.
  fixed32 i = 9; // Always four bytes. More efficient than uint32 if values are often greater than 228.
  fixed64 j = 10; // Always eight bytes. More efficient than uint64 if values are often greater than 256.
  sfixed32 k = 11; // Always four bytes.
  sfixed64 l = 12; // Always eight bytes.
  bool m = 13;
  string n = 14; // A string must always contain UTF-8 encoded or 7-bit ASCII text, and cannot be longer than 232.
  bytes o = 15; // May contain any arbitrary sequence of bytes no longer than 232.
  Nested p = 16; // Testing nested properties too.
  google.protobuf.Any q = 17;
  google.protobuf.Timestamp r = 18;
  google.protobuf.Struct s = 19;
  Enum t = 20;
}

message Nested {
  repeated double a = 1;
  repeated float b = 2;
  repeated int32 c = 3; 
  repeated int64 d = 4; 
  repeated uint32 e = 5; 
  repeated uint64 f = 6; 
  repeated sint32 g = 7; 
  repeated sint64 h = 8; 
  repeated fixed32 i = 9; 
  repeated fixed64 j = 10; 
  repeated sfixed32 k = 11; 
  repeated sfixed64 l = 12; 
  repeated bool m = 13;
  repeated string n = 14; 
  repeated bytes o = 15; 
  map<string,double> aa = 16;
  map<string,float> bb = 17;
  map<string,int32> cc = 18; 
  map<string,int64> dd = 19; 
  map<string,uint32> ee = 20; 
  map<string,uint64> ff = 21; 
  map<string,sint32> gg = 22; 
  map<string,sint64> hh = 23; 
  map<string,fixed32> ii = 24; 
  map<string,fixed64> jj = 25; 
  map<string,sfixed32> kk = 26; 
  map<string,sfixed64> ll = 27; 
  map<string,bool> mm = 28;
  map<string,string> nn = 29; 
  map<string,bytes> oo = 30; 
}
